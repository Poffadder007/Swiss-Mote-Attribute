 ​class​ ​Entity​(​base​.. SwissmoteEntity​): 
 ​    ​string​ ​=​ ​fields​.​StringField​() 
 ​    ​integer​ ​=​ ​fields​.​IntegerField​() 
 ​    ​boolean​ ​=​ ​fields​.​BooleanField​() 
 ​    ​datetime​ ​=​ ​fields​.​DateTimeField​() 
  
  
 ​class​ ​EntityWithRequired​(​Entity​): 
 ​    ​required​ ​=​ ​fields​.​StringField​(​required​=​True​) 
  
  
 ​class​ ​EntityWithDefault​(​Entity​): 
 ​    ​default​ ​=​ ​fields​.​StringField​(​default​=​'asd'​) 
 ​    ​callable_default​ ​=​ ​fields​.​StringField​(​default​=​lambda​ ​_​: ​'aaa'​) 
  
  
 ​class​ ​EntityWithMapping​(​Entity​): 
 ​    ​mapping​ ​=​ ​fields​.​MappingField​(​RandomEntity​, ​'eid'​) 
  
  
 ​class​ ​EntityWithRequiredMapping​(​Entity​): 
 ​    ​mapping​ ​=​ ​fields​.​MappingField​(​Entity​, ​'eid'​, ​required​=​True​) 
  
  
 ​class​ ​TestSwissmoteEntity​: 
  
 ​    ​def​ ​test_init​(​self​): 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
  
 ​        ​assert​ ​obj​.​string​ ​==​ ​'asd' 
 ​        ​assert​ ​obj​.​integer​ ​==​ ​123 
  
 ​        ​with​ ​pytest​.​raises​(​AttributeError​): 
 ​            ​obj​.​boolean 
  
 ​        ​# Test that not-present required field raise TypeError 
 ​        ​with​ ​pytest​.​raises​(​TypeError​): 
 ​            ​EntityWithRequired​(​string​=​'asd'​) 
  
 ​    ​def​ ​test_init_ignore_id​(​self​): 
 ​        ​obj_no_id​ ​=​ ​Entity​(​id​=​111​, ​string​=​'asd'​, ​integer​=​123​) 
 ​        ​assert​ ​obj_no_id​.​id​ ​is​ ​None 
  
 ​    ​def​ ​test_init_mapping​(​self​): 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​123 
 ​        ​mapped_obj​ ​=​ ​EntityWithMapping​(​mapping​=​obj​) 
 ​        ​assert​ ​mapped_obj​.​__dict__​[​'eid'​] ​==​ ​123 
 ​        ​mapped_obj​ ​=​ ​EntityWithMapping​(​eid​=​123​) 
 ​        ​assert​ ​mapped_obj​.​__dict__​[​'eid'​] ​==​ ​123 
 ​        ​with​ ​pytest​.​raises​(​TypeError​): 
 ​            ​EntityWithRequiredMapping​(​string​=​'asd'​) 
  
 ​    ​def​ ​test_to_dict​(​self​): 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj_dict​ ​=​ ​obj​.​to_dict​() 
  
 ​        ​assert​ ​obj_dict​[​'string'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'integer'​] ​==​ ​123 
  
 ​    ​def​ ​test_to_dict_default​(​self​): 
 ​        ​obj​ ​=​ ​EntityWithDefault​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj_dict​ ​=​ ​obj​.​to_dict​() 
  
 ​        ​assert​ ​obj_dict​[​'string'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'integer'​] ​==​ ​123 
 ​        ​assert​ ​obj_dict​[​'default'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'callable_default'​] ​==​ ​'aaa' 
  
 ​    ​def​ ​test_to_dict_mapping_default​(​self​): 
 ​        ​a​ ​=​ ​RandomEntity​() 
  
 ​        ​class​ ​EntityWithDefaultMapping​(​Entity​): 
 ​            ​default​ ​=​ ​fields​.​MappingField​(​RandomEntity​, ​'eid'​, ​default​=​a​) 
  
 ​        ​obj​ ​=​ ​EntityWithDefaultMapping​() 
 ​        ​obj_dict​ ​=​ ​obj​.​to_dict​() 
 ​        ​assert​ ​obj_dict​[​'default'​] ​is​ ​a 
  
 ​    ​def​ ​test_to_dict_mapping​(​self​, ​mocker​): 
 ​        ​obj​ ​=​ ​Entity​(​integer​=​321​) 
 ​        ​obj​.​id​ ​=​ ​123 
  
 ​        ​different_obj​ ​=​ ​Entity​(​integer​=​321​) 
 ​        ​different_obj​.​id​ ​=​ ​124 
  
 ​        ​mapped_obj​ ​=​ ​EntityWithMapping​(​string​=​'asd'​, ​mapping​=​obj​) 
  
 ​        ​mocker​.​patch​.​object​(​base​.. SwissMoteSet​, ​'get'​) 
 ​        ​base​.. SwissMoteSet​.​get​.​return_value​ ​=​ ​obj 
  
 ​        ​obj_dict​ ​=​ ​mapped_obj​.​to_dict​() 
 ​        ​assert​ ​obj_dict​[​'string'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'mapping'​] ​is​ ​obj 
 ​        ​base​.. SwissMoteSet​.​get​.​assert_called_with​(​123​, ​config​=​mocker​.​ANY​) 
 ​        ​base​.. SwissMoteSet​.​get​.​reset_mock​() 
  
 ​        ​obj_dict​ ​=​ ​mapped_obj​.​to_dict​(​serialized​=​True​) 
 ​        ​assert​ ​obj_dict​[​'string'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'eid'​] ​==​ ​123 
  
 ​        ​base​.. SwissmoteSet​.​get​.​return_value​ ​=​ ​different_obj 
 ​        ​mapped_obj​.​mapping​ ​=​ ​different_obj 
 ​        ​change_obj_dict​ ​=​ ​mapped_obj​.​to_dict​(​changes_only​=​True​) 
 ​        ​assert​ ​'string'​ ​not​ ​in​ ​change_obj_dict 
 ​        ​assert​ ​change_obj_dict​[​'mapping'​] ​is​ ​different_obj 
 ​        ​base​.. SwissmoteSet​.​get​.​assert_called_with​(​124​, ​config​=​mocker​.​ANY​) 
  
 ​    ​def​ ​test_to_dict_changes​(​self​): 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​, ​boolean​=​True​) 
 ​        ​obj​.​boolean​ ​=​ ​False 
 ​        ​obj​.​integer​ ​=​ ​321 
 ​        ​obj_dict​ ​=​ ​obj​.​to_dict​(​changes_only​=​True​) 
  
 ​        ​assert​ ​'string'​ ​not​ ​in​ ​obj_dict 
 ​        ​assert​ ​obj_dict​[​'integer'​] ​==​ ​321 
 ​        ​assert​ ​obj_dict​[​'boolean'​] ​is​ ​False 
  
 ​    ​def​ ​test_to_dict_serialization​(​self​): 
 ​        ​date​ ​=​ ​pendulum​.​now​(​tz​=​'UTC'​) 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​, ​datetime​=​date​) 
 ​        ​obj_dict​ ​=​ ​obj​.​to_dict​(​serialized​=​True​) 
  
 ​        ​assert​ ​obj_dict​[​'string'​] ​==​ ​'asd' 
 ​        ​assert​ ​obj_dict​[​'integer'​] ​==​ ​123 
 ​        ​assert​ ​obj_dict​[​'datetime'​] ​==​ ​date​.​to_iso8601_string​() 
  
 ​    ​def​ ​test_copy​(​self​): 
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​123 
 ​        ​new_obj​ ​=​ ​copy​(​obj​) 
  
 ​        ​assert​ ​not​ ​obj​ ​is​ ​new_obj 
 ​        ​assert​ ​obj​.​string​ ​==​ ​new_obj​.​string 
 ​        ​assert​ ​obj​.​integer​ ​==​ ​new_obj​.​integer 
 ​        ​assert​ ​new_obj​.​id​ ​is​ ​None 
  
 ​    ​def​ ​test_save_create​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'toggl'​) 
 ​        ​utils​.​Swissmote.​return_value​ ​=​ { 
 ​            ​'data'​: { 
 ​                ​'id'​: ​333 
 ​            } 
 ​        } 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​save​() 
  
 ​        ​assert​ ​obj​.​id​ ​==​ ​333 
 ​        ​assert​ ​utils​.​Swissmote.​called​ ​is​ ​True 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​_can_create​ ​=​ ​False 
 ​        ​with​ ​pytest​.​raises​(​exceptions​.​SwissMoteException​): 
 ​            ​obj​.​save​() 
  
 ​    ​def​ ​test_save_update​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ { 
 ​            ​'data'​: { 
 ​                ​'id'​: ​333 
 ​            } 
 ​        } 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​333 
 ​        ​obj​.​save​() 
  
 ​        ​assert​ ​obj​.​id​ ​==​ ​333 
 ​        ​assert​ ​utils​.​swissmote.​called​ ​is​ ​True 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​333 
 ​        ​obj​.​_can_update​ ​=​ ​False 
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissMoteException​): 
 ​            ​obj​.​save​() 
  
 ​    ​def​ ​test_delete​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'toggl'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ { 
 ​            ​'data'​: { 
 ​                ​'id'​: ​333 
 ​            } 
 ​        } 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​333 
 ​        ​obj​.​save​() 
  
 ​        ​assert​ ​obj​.​id​ ​==​ ​333 
 ​        ​assert​ ​ututil.swissmote.called​ ​is​ ​True 
  
 ​        ​obj​ ​=​ ​Entity​(​string​=​'asd'​, ​integer​=​123​) 
 ​        ​obj​.​id​ ​=​ ​333 
 ​        ​obj​.​_can_update​ ​=​ ​False 
 ​        ​with​ ​pytest​.​raises​(​exceptions​..SwissException​): 
 ​            ​obj​.​save​()
