class​ ​TestSwissMoteSet​: 
  
 ​    ​def​ ​test_rebind_class​(​self​): 
 ​        ​sset​ ​=​ ​base​.Swissmoteset() 
  
 ​        ​sset​.​bind_to_class​(​RandomEntity​) 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. Swissmote Exception​): 
 ​            ​sset​.​bind_to_class​(​RandomEntity​) 
  
 ​    ​def​ ​test_unbound_set​(​self​): 
 ​        ​sset​ ​=​ ​base​.. SwissMoteSet​() 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissmoteException​): 
 ​            ​sset​.​get​() 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissMoteException​): 
 ​            ​sset​.​all​() 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissMote Exception​): 
 ​            sset​.​filter​() 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissMoteException​): 
 ​           sset​.​base_url 
  
 ​    ​def​ ​test_url​(​self​): 
 ​        sset​ ​=​ ​base​.. SwissmoteSet​(​url​=​'http://some-url.com'​) 
 ​        ​assert​ sset​.​base_url​ ​==​ ​'http://some-url.com' 
  
 ​        ​sset​ ​=​ ​base​.. SwissmoteSet​(​RandomEntity​) 
 ​        ​assert​ sset​.​base_url​ ​==​ ​'random_entitys' 
  
 ​    ​def​ ​test_can_get_detail​(​self​): 
 ​        sset​ ​=​ ​base​.et​(​can_get_detail​=​False​) 
 ​        ​assert​  sset​.​can_get_detail​ ​is​ ​False 
  
 ​        ​RandomEntity​.​_can_get_detail​ ​=​ ​False 
 ​        sset​ ​=​ ​base​.. SwissmoteSet​(​RandomEntity​) 
 ​        ​assert​ sset​.​can_get_detail​ ​is​ ​False 
 ​        ​RandomEntity​.​_can_get_detail​ ​=​ ​True 
 ​        ​assert​  sset​.​can_get_detail​ ​is​ ​True 
  
 ​        sset​ ​=​ ​base​.. SwissmoteSet​() 
 ​        ​assert​ ​sset​.​can_get_detail​ ​is​ ​True 
  
 ​    def​ ​test_can_get_list​(​self​): 
 ​        ​sset​ ​=​ ​base​.. SwissMoteset​(​can_get_list​=​False​) 
 ​        ​assert​  sset​.​can_get_list​ ​is​ ​False 
  
 ​        ​RandomEntity​.​_can_get_list​ ​=​ ​False 
 ​        sset​ ​=​ ​base​.. SwissMoteset​(​RandomEntity​) 
 ​        ​assert​ ​sset​.​can_get_list​ ​is​ ​False 
 ​        ​RandomEntity​.​_can_get_list​ ​=​ ​True 
 ​        ​assert​ ​sset​.​can_get_list​ ​is​ ​True 
  
 ​        sset​ ​=​ ​base​.SwissSet​() 
 ​        ​assert​ ​sset​.​can_get_list​ ​is​ ​True 
  
 ​    ​# Get() 
  
 ​    ​def​ ​test_get_detail_basic​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​swiss'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ { 
 ​            ​'data'​: { 
 ​                ​'some_field'​: ​'asdf' 
 ​            } 
 ​        } 
  
 ​        ​sset​ ​=​ ​base​.. SwissMoteSet​(​RandomEntity​) 
 ​        ​obj​ ​=​  sset​.​get​(​id​=​123​) 
  
 ​        ​assert​ ​obj​ ​is​ ​not​ ​None 
 ​        ​assert​ ​obj​.​some_field​ ​==​ ​'asdf' 
  
 ​    ​def​ ​test_get_detail_none​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'Swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ { 
 ​            ​'data'​: ​None 
 ​        } 
  
 ​        sset​ ​=​ ​base​.. SwissMoteSet​(​RandomEntity​) 
 ​        ​obj​ ​=​ sset​.​get​(​id​=​123​) 
  
 ​        ​assert​ ​obj​ ​is​ ​None 
  
 ​    ​def​ ​test_get_detail_none_exception​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.side_effect​ ​=​ ​exceptions​.. SwissMoteNotFoundException​(​404​, ​'Not found'​) 
  
 ​        sset​ ​=​ ​base​.SwissmoteSet​(​RandomEntity​) 
 ​        ​obj​ ​=​ ​sset​.​get​(​id​=​123​) 
  
 ​        ​assert​ ​obj​ ​is​ ​None 
  
 ​    ​def​ ​test_get_detail_filter_fallback​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.swissmote.​return_value​ ​=​ [{ 
 ​            ​'id'​: ​123​, 
 ​            ​'some_field'​: ​'asdf' 
 ​        }] 
  
 ​        ​sset​ ​=​ ​base​.​SwissmoteSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​obj​ ​=​ ​sset​.​get​(​id​=​123​) 
  
 ​        ​assert​ ​obj​ ​is​ ​not​ ​None 
 ​        ​assert​ ​obj​.​some_field​ ​==​ ​'asdf' 
  
 ​    ​def​ ​test_get_detail_filter_fallback_multiple_entries​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ [{ 
 ​            ​'id'​: ​123​, 
 ​            ​'some_field'​: ​'asdf' 
 ​        }, { 
 ​            ​'id'​: ​123​, 
 ​            ​'some_field'​: ​'asdf' 
 ​        }] 
  
 ​        ​sset​ ​=​ ​base​.SwissmoteSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissmoteMultipleResultsException​): 
 ​            ​sset​.​get​(​id​=​123​) 
  
 ​    ​def​ ​test_get_detail_filter_fallback_no_entries​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote') 
 ​        ​utils​.swissmote.​return_value​ ​=​ [{ 
 ​            ​'id'​: ​321​, 
 ​            ​'some_field'​: ​'asdf' 
 ​        }, { 
 ​            ​'id'​: ​321​, 
 ​            ​'some_field'​: ​'asdf' 
 ​        }] 
  
 ​        ​sset​ ​=​ ​base​SwissmoteSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​assert​ ​sset​.​get​(​id​=​123​) ​is​ ​None 
  
 ​    ​# Filter() 
  
 ​    ​def​ ​test_filter​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​..swissmote.return_value​ ​=​ [ 
 ​            {
 ​                ​'id'​: ​1​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​2​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'mmm' 
 ​            }, 
 ​        ] 
  
 ​        sset​ ​=​ ​base​.. SwissMoteSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​objs​ ​=​ sset​.​filter​(​some_field​=​'asdf'​) 
 ​        ​assert​ ​len​(​objs​) ​==​ ​2 
  
 ​    ​def​ ​test_filter_multiple_conditions​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ [ 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​2​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'mmm' 
 ​            }, 
 ​        ] 
  
 ​        sset​ ​=​ ​base​.​SwissmoteSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​objs​ ​=​ sset​.​filter​(​some_field​=​'asdf'​, ​id​=​2​) 
 ​        ​assert​ ​len​(​objs​) ​==​ ​1 
  
 ​    ​def​ ​test_filter_contain​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ [ 
 ​            { 
 ​                ​'id'​: ​1​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​1​, 
 ​                ​'some_field'​: ​'asdf-aa' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​2​, 
 ​                ​'some_field'​: ​'asdf-bb' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'mmm' 
 ​            }, 
 ​        ] 
  
 ​        sset​ ​=​ ​base​..SwissSet​(​RandomEntity​, ​can_get_detail​=​False​) 
 ​        ​objs​ ​=​ sset​.​filter​(​some_field​=​'asdf'​, ​contain​=​True​) 
 ​        ​assert​ ​len​(​objs​) ​==​ ​3 
  
 ​    ​def​ ​test_all​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​'swissmote'​) 
 ​        ​utils​.​swissmote.​return_value​ ​=​ [ 
 ​            { 
 ​                ​'id'​: ​4​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​1​, 
 ​                ​'some_field'​: ​'asdf-aa' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​2​, 
 ​                ​'some_field'​: ​'asdf-bb' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'mmm' 
 ​            }, 
 ​        ] 
  
 ​        sset​ ​=​ ​base​.. SwissMoteSet​(​RandomEntity​) 
 ​        ​objs​ ​=​ sset​.​all​() 
 ​        ​assert​ ​len​(​objs​) ​==​ ​4 
 ​        ​assert​ ​objs​[​0​].​some_field​ ​==​ ​'asdf' 
  
 ​    ​def​ ​test_all_sort​(​self​, ​mocker​): 
 ​        ​mocker​.​patch​.​object​(​utils​, ​''swissmote') 
 ​        ​utils​.​swissmote.​return_value​ ​=​ [ 
 ​            { 
 ​                ​'id'​: ​4​, 
 ​                ​'some_field'​: ​'asdf' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​1​, 
 ​                ​'some_field'​: ​'asdf-aa' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​2​, 
 ​                ​'some_field'​: ​'asdf-bb' 
 ​            }, 
 ​            { 
 ​                ​'id'​: ​3​, 
 ​                ​'some_field'​: ​'mmm' 
 ​            }, 
 ​        ] 
  
 ​        sset​ ​=​ ​base​.. SwissMoteSet​(​RandomEntity​) 
 ​        ​objs​ ​=​ sset​.​filter​(​order​=​'desc'​) 
 ​        ​assert​ ​len​(​objs​) ​==​ ​4 
 ​        ​assert​ ​objs​[​0​].​some_field​ ​==​ ​'mmm' 
  
 ​    ​def​ ​test_all_can_get_list_false​(​self​): 
 ​       sset​ ​=​ ​base​.. SwissmoteSet​(​RandomEntity​, ​can_get_list​=​False​) 
  
 ​        ​with​ ​pytest​.​raises​(​exceptions​.. SwissMoteException​): 
 ​            sset​.​all​() 
  
  
 ​####################################################################################################### 
 ​##
